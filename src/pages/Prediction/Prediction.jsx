import React, { Component } from "react";
import Container from 'react-bootstrap/Container';
import Row from 'react-bootstrap/Row';
import { Slider, Divider } from "antd";
import Button from 'react-bootstrap/Button';
import Form from 'react-bootstrap/Form';
import axios from 'axios'
import { env } from '../../env';



const seq = `>chr1
GTACACTGATCACGTGGCTGATCATGCACAAATCCCATTGCATATCATGCTCTGATCAGG
TTGCTATCATGTACTGATCACTTGGCTGATCATACACTGATCACATGACTGATCATGCAC
TGATCACGTGCCTGATCATGCACTGATCCCGTGGCAGATCATGCACTGATCACGTGCAGA
TCATGCACTCATCATGTGGCTGATCATACAATGATCACGTGGCTGATCATGCACTGATCA
CATGTATGATCGTACACTGATCACGTGGCTGATCATGCACAAATCCCATTGCATATTCAT
GCTCTGATCAGGTTGCTATCATGTACTGATCACGTGGCTGATCATACACTGATCACAATG
ACTGATCATGCACTGATCACGTGCCTGATCATGCACTGATCCCGTGGGGCTGATCTTGCA
CTGATCACGTGGCTGATAATGGCACTGATCACTTGACTGATCATGCACTGATCACGTCTC
TTATCATGCACTACTCACGTGACTGATCATGGACTGATCACGTGACTGATCATGCACTGA
TCATGAGCCTGATCATGCACTGATCACGGGCCTGTTCATGCACTGATCACGTGGCTGATC
CTGCACTGATCACGAGGCTGATCATACACTGATCACGTGACTGTGCATGCAATGATCACT
TGGCTGATCATGTACTGATCACGTGGCTGATCATGCACTGATCACATGACTGAGTTGCAC
TGATCACATAGCTATCATGCACTGATCACGTGACTTCGCATGCCATGATCACGTGACTGA
TCATGCACTGGTCCCGTGGCTATCATGCACTGATAATGTGGCTTATCATACATTGATCAC
CTAAATAATCATGCCACTGATCACGTGGCAATCTTGCTCTGATCACGTGGTTGATCAGGC
ACTGATCACTTAGCTATCATGCACTGATCACATGAACTGCGCAAGAACTGATCACTTAGA
TATCATACACAGGACACGTGACAGATCATGCACTGAATCACGTGACTGATCATGCACTGA
TCTGGTGGCTATCATGCACTGATCCCGTGGCTGATCTTGCACTGATCACGTGGCTTGATA
ATGCACTGATCACTTGACTGATCATGCACTGATCACGTCTCTTATCATGCCACTACTCAC
GTGACTGATCATGGACTGATCACGTGACTGATCATGCACTGATCATGAGCCCTGATCATG
CACTGATCACGGGCCTGTTCATGCACTGATCACGTGGCTGATCCTGCACTTGATCACGAG
GCTGATCATACACTGATCACGTGACTGTGCATGCAATGATCACTTGGCTGATCATGTACT
GATCACGTAGCTGATCATGCTCTGATCACGTGACTGATTATGCACTGATCACATAGCTAT
CATGCACTGATCACATGACTTCGCATGCCATGATCACGTGACTGATCATGCACTGATCAC
GTGGCTATCATGCACTGATAATGTGGCTTATCATACATTGATCACCTAAATATCATGCAC
TGATCACGTGGCAATCTTGCTCTGATCACGTGGTTGATCAGGCACTGATCACTTAGCTAT
CATGCACTGATCACATGACTGCGCAAGAACTGATCACTTAGATATCATACACAGGACACG
TGACAGATCATGCACTGATCACGTGACTGATCATGCACTGATCTGGTGCTATCATGCATT
GATCACGTGGTTGATCATACACTGATCACGTGACTGATCATGCACTGATCACCTGGCTAT
CATGCACTAATCACGTAGCTGATCTGGAACAGATCACGTGACTAATCATGCAGTGATCAC
GTCGCTATCATGCAATGATCTCGAGATTGCGCATGCACTGATCATATGGATGATCACACA
CTGATCACGTGACAGATCATGCACTGAACACGTGACTTATAATGCACTGATCACGTGACT
GCACATGCACTGATCATGTGACTGAGCATGCACTGATCACGTAGCTGATCATGCACTGAT
TCACGAAGTTGATCATACACTGATCATGTGACTGAGCATGCACTGACCACGTAGCTGATC
ATGCACTGATCACGAAGTTGATCATACACTGATCACGTGAGTGTGCATGCACTGATCACG
TGGCGGATAATGCAATGATCACGTGGCTGATCATGCACTGATCACGTAGCTCTCATGCAC
TGATCACATGTCAACCATGCCCGGATCCCGTGGCTGATCATGCACTGATCGCCTGACTGA
TCAGGCACTAGTCACCTGGCTATCATGCACTAATCACGTGGCTGTTCATACACTGACCAC
GTGACTGATCATGCACTGATCTGGTGGCTATCATGCATTGATCACGTGTTTGATCTTACA
CTGATTCACGTGACTGATCATGCACTGATCACCTGGCTTTCATGCACTAATCACGTAGCT
GATCTGGAACAGATCACGTGACTAATCATGCAGTGATCACGTCGCTATCATGCAATGATC
TCGAGATTGCGCATGCACTGATCATATGGATGATCACACACTGATCACGTGACAGATCAT
GCACTGATCACGTGACTTATCATGCACTGATCACGAGACTGCACATGCACTGATCATGTG
ACTGAAGCATGCACTGATCATGTAGCTGATCATGCACTGATCACGAAGTTGATCATCACT
GATCATGTGACTGAGCATGCACTGATCACGTAGCTGATCATGCACTGATCACGAAGTTGA
TCATACACTGATCACGTGAGTGTGCATGCACTGATCACGTGGCGGATAATGCAATGTTCA
CGTAGCTCTCATGCACTGATCACATGTCAATCACGCCCGGATCCCGTGGCTGATCATGCA
CTGATCTCGAAGCTGATCATACACTGATCACGTGAGTGTGCATGCAATGATAACATGGCT
GATTATGCAATTATCACGTGGCTTATCATACACTGATCACGTGGCTGATCATGCACTAAT
CACGTTTTGGATGATGCACTGGTCACGTGGCTGATCATACACTAATCACATGACTGATCA
TGCACTAATCACGTTGTGGATCATGCACTGATCACGTGGCTGTTCTTGCACTTATCACGT
GGCTGATCATACAGTGATTACATGACTGATCATGCACTAATCACGATGTGGATCATGCAC
TGATCACATGAATGTGCATGCATTGATCATGTGGCTGATCATGCACTGATCACGTGGCTG
ATCATGCACTGATCACGAAGCTGATATTACACTGATCACAGGACTGTGCATGCACTGATC
ATGTGGCTGATCATGCACTGATCATGTGGCTGATGATACACTGATCACGTGGCTGATCGT
ACTCTGAACACGAAGCTGAAAATACACTGATCACGAGACTGCATGCACTGATCACTTGAC
TGCGCCTGCACTGATCACGTGGATGATAATACGCTGATCACTTGACTGCTTATGCACTAA
AAAAATGGCTGATCATGCACTGATCACATGACTGATCATGCACTGATCACGTGACTACCA
TGCACTGATCACTTGATTGTGCATGCAATAATCACGTGGATGATCACGCATTTATCATGT
GGCTGATCATGCACTAATCACATGGCGGAACATGAACTGATCACGTGACTTAGCATGCAG
TGATCTCGTGTCTGAATGGTGCTGATCATGTGACTAAACAAGAACTGATCACGTGGCTAT
AATGCACTGATCACGTAACTGCACATGCACTGATCATGTGACTGAGCATGCACTAATCAT
GTAGCTGATCATGCACTGATCACGAAGTTGATCATACACTGATCATGTGACTGAGCATGC
ACTGACCACGTAGCTGATCATGCACTGATCACGTTGCGTATCATGCACTGATCACATGAC
GGCGCATGAACTGATCACGTGGATATTATACACTGATCAAGTGACAAATCATGCACTAAT
CACGTGACTGATCATGCACTGATCACGTGGCTATCATGCACTGATCACGTGACTGATCAT
GCACTTGACACGTCGCTATCATGCACTGATCACGTGGCTGTTCATACAGTGATCACGTGA
CTGATCATGCACTGATCCCGTGGCTGATCATGCACTGATCACGTTGCAGATCATGCACTC
ATCACGTGGCTGATCATACAATGATCACGTGGCTGATCATGCACTAATCACATGTGTGAT
CGTACACTGATCACGTGGCTGATCATGCACAAATCCCATTGCATATCATGCTCTGATCAG
GTTGCTATCATGTACTGATCACTTGGCTGATCATACACTGATCACATGACTGATCATGCA
CTGATCACGTGCCTGATCATGCACTGATCCCGTGGCAGATCATGCACTGATCACGTGCAG
ATCATGCACTCATCATGTGGCTGATCATACAATGATCACGTGGCTGATCATGCACTGATC
ACATGTATGATCGTACACTGATCACGTGGCTGATCATGCACAAATCCCATTGCATATCAT
GCTCTGATCAGGTTGCTATCATGTACTGATCACGTGGCTGATCATACACTGATCACATGA
CTGATCATGCACTGATCACGTGCCTGATCATGCACTGATCCCGTGGCTGATCTTGCACTG
ATCACGTGGCTGATAATGCACTGATCACTTGACTGATCATGCACTGATCACGTCTCTTAT
CATGCACTACTCACGTGACTGATCATGGACTGATCACGTGACTGATCATGCACTGATCAT
GAGCCTGATCATGCACTGATCACGGGCCTGTTCATGCACTGATCACGTGGCTGATCCTGC
ACTGATCACGAGGCTGATCATACACTGATCACGTGACTGTGCATGCAATGATCACTTGGC
TGATCATGTACTGATCACGTGGCTGATCATGCACTGATCACATGACTGATTATGCACTGA
TCACATAGCTATCATGCACTGATCACATGACTTCGCATGCCATGATCACGTGACTGATCA
TGCACTGGTCCCGTGGCTATCATGCACTGATAATGTGGCTTATCATACATTGATCACCTA
AATAATCATGCACTGATCACGTGGCAATCTTGCTCTGATCACGTGGTTGATCAGGCACTG
ATCACTTAGCTATCATGCACTGATCACATGACTGCGCAAGAACTGATCACTTAGATATCA
TACACAGGACACGTGACAGATCATGCACTGATCACGTGACTGATCATGCACTGATCTGGT
GGCTATCATGCACTGATCCCGTGGCTGATCTTGCACTGATCACGTGGCTGATAATGCACT
GATCACTTGACTGATCATGCACTGATCACGTCTCTTATCATGCACTACTCACGTGACTGA
TCATGGACTGATCACGTGACTGATCATGCACTGATCATGAGCCTGATCATGCACTGATCA
CGGGCCTGTTCATGCACTGATCACGTGGCTGATCCTGCACTGATCACGAGGCTGATCATA
CACTGATCACGTGACTGTGCATGCAATGATCACTTGGCTGATCATGTACTGATCACGTAG
CTGATCATGCTCTGATCACGTGACTGATTATGCACTGATCACATAGCTATCATGCACTGA
TCACATGACTTCGCATGCCATGATCACGTGACTGATCATGCACTGATCACGTGGCTATCA
TGCACTGATAATGTGGCTTATCATACATTGATCACCTAAATAATCATGCACTGATCACGT
GGCAATCTTGCTCTGATCACGTGGTTGATCAGGCACTGATCACTTAGCTATCATGCACTG
ATCACATGACTGCGCAAGAACTGATCACTTAGATATCATACACAGGACACGTGACAGATC
ATGCACTGATCACGTGACTGATCATGCACTGATCTGGTGGCTATCATGCATTGATCACGT
GGTTGATCATACACTGATCACGTGACTGATCATGCACTGATCACCTGGCTATCATGCACT
AATCACGTAGCTGATCTGGAACAGATCACGTGACTAATCATGCAGTGATCACGTCGCTAT
CATGCAATGATCTCGAGATTGTGCATGCACTGATCATATGGATGATCACACACTGATCAC
GTGACAGATCATGCACTGAACACGTGACTTATAATGCACTGATCACGTGACTGCACATGC
ACTGATCATGTGACTGAGCATGCACTGATCACGTAGCTGATCATGCACTGATCACGAAGT
TGATCATACACTGATCATGTGACTGAGCATGCACTGACCACGTAGCTGATCATGCACTGA
TCACGAAGTTGATCATACACTGATCACGTGAGTGTGCATGCACTGATCACGTGGCGGATA
ATGCAATGATCACGTGGCTGATCATGCACTGATCACGTAGCTCTCATGCACTGATCACAT
GTCAACCATGCCCGGATCCCGTGGCTGATCATGCACTGATCGCCTGACTGATCAGGCACT
AGTCACCTGGCTATCATGCACTAATCACGTGGCTGTTCATACACTGACCACGTGACTGAT
CATGCACTGATCTGGTGGCTATCATGCATTGATCACGTGTTTGATCTTACACTGATCACG
TGACTGATCATGCACTGATCACCTGGCTTTCATGCACTAATCACGTAGCTGATCTGGAAC
AGATCACGTGACTAATCATGCAGTGATCATGTCGCTATCATGCAATGATCTCGAGATTGC
GCATGCACTGATCATATGGATGATCACACACTGATCACGTGACAGATCATGCACTGATCA
CGTGACTTATCATGCACTGATCACGAGACTGCACATGCACTGATCATGTGACTGAGCATG
CACTGATCATGTAGCTGATCATGCACTGATCACGAAGTTGATCATACACTGATCATGTGA
CTGAGCATGCACTGATCACGTAGCTGATCATGCACTGATCACGAAGTTGATCATACACTG
ATCACGTGAGTGTGCATGCACTGATCACATGGCGGATAATGCAATGTTCACGTGGCTGAT
CATGCACTGATCACGTAGCTCTCATGCACTGATCACATGTCAATCACGCCCGGATCCCGT`

export class Prediction extends Component {

  constructor(props) {
    super(props);
    this.state = {
      filename:'',
      genome: '',
      ssrResult: '',
      isOpen: false,
      showdata: false,
      minRepeat:1,
      maxRepeat:6,
      mono:10,
      all:5


    };
    this.handleGeneChange = this
      .handleGeneChange
      .bind(this);
    this.fileSelected = this
      .fileSelected
      .bind(this);
    this.getMotif = this
      .getMotif
      .bind(this)
    this.getMono = this
      .getMono
      .bind(this)
    this.getAll = this
      .getAll
      .bind(this)
    this.runPrediction = this
      .runPrediction
      .bind(this)


  }
  openModel = () => this.setState({ isOpen: true });
  closeModel = () => this.setState({ isOpen: false });

  handleGeneChange(e) {

    this.setState({ genome: e.target.value });
  }

  fileSelected(event) {

    this.setState({filename: event.target.files[0]})
    
  }

  getMotif = (value) => {

    this.setState({ minRepeat: parseInt(value[0]), maxRepeat: parseInt(value[1]) }, () => {
        
    });
}

getMono = (value) => {

  this.setState({ mono: parseInt(value) }, () => {
      
  });
}
getAll = (value) => {

  this.setState({ all: parseInt(value) }, () => {
      
  });
}

runPrediction() {
  this.openModel();

 console.log(this.state.filename)
  const data = new FormData() 
  data.append('file', this.state.filename)
  data.append('genome', this.state.genome)
  data.append('minRepeat', this.state.minRepeat)
  data.append('maxRepeat', this.state.maxRepeat)
  data.append('mono', this.state.mono)
  data.append('all', this.state.all)
  console.log(data)
  axios.post(`${env.BACKEND}/api/prediction?`, data, {})
  .then(res => { // then print response status
    console.log(res.data)
    this.closeModel();
    window.open("/ranchsatdb/predresults", "_blank");
        localStorage.setItem('results', JSON.stringify(res.data))
 })
   
   

  
}

  render() {

    return (
      <div>

        <Container >
          <Row className="mb-2">
            <h4>SSR Prediction</h4>
            <Divider />
          </Row>
          <div className="row">
            <div className="col-md-7">
              <div className="row justify-content-center">
                <h5>Enter or paste FASTA sequence</h5>
                <Form.Control className="kbl-form mb-4" as="textarea" rows={6} placeholder={'Paste FASTA sequence'} onChange={this.handleGeneChange}
                  value={this.state.genome} spellCheck={false} />
                <Button className="kbl-btn-1 mx-3 col-md-3" onClick={e => {
                  this.setState({ genome: seq });
                }}>Sample Data</Button>
                <Button className="kbl-btn-2 col-md-3" onClick={e => {
                  this.setState({ genome: "" })
                }}>Clear Data</Button>
              </div>
              <h5 className="mt-3">OR</h5>
              <div className="row my-3">
              <h5 > Upload FASTA file</h5>
                <div className="col-md-12">
                {/* <label for="formFile" class="form-label">Default file input example</label> */}
                <input className="form-control" type="file" name='file' onChange={this.fileSelected}/>

                  
                </div>
              </div>
            </div>

            <div className="col-md-4 mx-5 jusitfy-content-center">
              <h5>Select Options</h5>

              <label className='h6'>Min and Max length of repeat motif</label>
              <Slider range defaultValue={[1, 6]} marks={{ 1: '1', 10: '10' }} disabled={false} min={1} max={10} onChange={this.getMotif} />
              <label className='h6'>Mono repeat motif length</label>
              <Slider defaultValue={10} marks={{ 0: '0', 20: '20' }} disabled={false} min={0} max={20} onChange={this.getMono} />
              <label className='h6'>Motif repeat length</label>
              <Slider defaultValue={5} marks={{ 0: '0', 20: '20' }} disabled={false} min={0} max={20} onChange={this.getAll} />

            </div>
          </div>
          <div className="row justify-content-center">
          <div className="row flex-lg-row justify-content-center g-2 my-3">
          {this.state.isOpen && (
            <div className="col-md-8">
              <img
                src="./images/test.gif"
                className="loading"
                height="50px"
                alt=""
              ></img>
            </div>
          )}
          {this.state.isOpen === false && (
            <div className="col-md-3">
              <Button
                type="success"
                shape="round"
                size="large"
                onClick={this.runPrediction}
              >
                Run Prediction{" "}
              </Button>
            </div>
          )}
          </div>
          </div>
        </Container>

      </div>
    )
  }
}